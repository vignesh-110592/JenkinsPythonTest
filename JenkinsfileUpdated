pipeline {
    agent any

    parameters {
        string(name: 'Company_name', defaultValue: 'ncsolution GmbH', description: 'Company Name')
        string(name: 'Person_name', defaultValue: 'geehrte ', description: 'Person Name')
        choice(
            name: 'Position_name', 
            choices: ['DevOps Engineer', 'DevOps Specialist', 'Cloud Engineer', 'DevOps Architekt', 'Softwareentwickler DevOps', 'Other'], 
            description: 'Select job role')
        string(name: 'Custom_Position_name', defaultValue: 'DevOps Engineer', description: 'Enter custom job role if not listed')
        booleanParam(name: 'REBUILD_IMAGE', defaultValue: false, description: 'Force Docker image rebuild?')
    }

    environment {
        IMAGE_NAME = 'my-python-script'
        WORKSPACE_DIR = "${env.WORKSPACE}"
    }

    stages {
        stage('Determine Role') {
            steps {
                script {
                    // Use custom input if 'Other' is selected
                    finalRole = (params.Position_name == 'Other') ? params.Custom_Position_name : params.Position_name

                    if (!finalRole?.trim()) {
                        error("No job role provided. Please select or enter a role.")
                    }

                    echo "Final job role selected: ${finalRole}"
                }
            }
        }

        stage('Build Docker Image') {
            when {
                expression {
                    return params.REBUILD_IMAGE == true
                }
            }
            steps {
                script {
                    bat """
                        docker build -t %IMAGE_NAME% .
                    """
                }
            }
        }

        stage('Update DOCX Files') {
            steps {
                script {
                    bat """
                        docker run --rm ^
                            -v "%WORKSPACE_DIR%:/app" ^
                            -w /app ^
                            %IMAGE_NAME% ^
                            python replace_docx_text.py "%COMPANY_NAME%" "%PERSON_NAME%" "${finalRole}"
                    """
                }
            }
        }

        stage('Verify Updates') {
            steps {
                script {
                    bat """
                        docker run --rm ^
                            -v "%WORKSPACE_DIR%:/app" ^
                            -w /app ^
                            %IMAGE_NAME% ^
                            python verify_docx_text.py "%COMPANY_NAME%" "%PERSON_NAME%" "${finalRole}"
                    """
                }
            }
        }
        
        stage('Convert to PDF') {
            steps {
                bat """
                    python convertToPDF_windows.py
                """
            }
        }
    }
}
